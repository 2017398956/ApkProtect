import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.4.2"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
        classpath 'de.undercouch:gradle-download-task:5.6.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
        maven { url "https://jitpack.io" }
    }
}

String unJiaguApkName = "demo-release-unsigned.apk"

task clean(type: Delete) {
    delete rootProject.buildDir
}

interface OnReadLineListener {
    boolean onReadLine(String lineStr)
}

def runCommand(OnReadLineListener listener, boolean printLog, String... command) {
    runCommand(null, listener, printLog, command)
}

def runCommand(String workDir, OnReadLineListener listener, boolean printLog, String... command) {
    ProcessBuilder processBuilder = new ProcessBuilder()
    if (null != workDir && !workDir.isBlank()) {
//        processBuilder.directory(new File(workDir))
    }
    processBuilder.redirectErrorStream(true)
    Map<String, Object> pbEnv = processBuilder.environment()
    String newPath = getAaptPath()
//    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//        newPath = newPath + ";" + pbEnv["Path"]
//    } else {
//        newPath = newPath + ":" + pbEnv["Path"]
//    }
//    pbEnv["Path"] = newPath
    processBuilder.command(command)
    Process process = processBuilder.start()
    if (printLog) {
        println("process start")
    }
    InputStreamReader inputReader = new InputStreamReader(process.getInputStream(), "UTF8")
    BufferedReader bufferedReader = new BufferedReader(inputReader)
    StringBuilder stringBuilder = new StringBuilder();
    String line
    while ((line = bufferedReader.readLine()) != null) {
        stringBuilder.append(line).append("\n")
        if (printLog) {
            println(line)
        }
        if (listener != null && listener.onReadLine(line)) {
            break
        }
    }
    process.waitFor()
    if (printLog) {
        println("process finish")
    }
    inputReader.close()
    bufferedReader.close()
    return stringBuilder.toString()
}

task testCmdTask(type: Exec, description: '执行加固so File 操作') {
    workingDir projectDir
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        /**
         * 如果执行命令后报 finished with non-zero exit value xxx,
         * 那么把 /c 去掉试试
         */
        // commandLine 'cmd', '/c', "echo", "%PATH%"
        commandLine 'cmd', '/c', "echo", "Test Cmd"
    } else {
        commandLine 'sh', '-c', "echo", "PATH"
    }
}

def getApkSHA1(String apkPath) {
    String apkSHA1
    runCommand(new OnReadLineListener() {
        @Override
        boolean onReadLine(String lineStr) {
            if (null != lineStr && lineStr.containsIgnoreCase("SHA1")) {
                apkSHA1 = lineStr.trim().substring(6)
                return true
            }
            return false
        }
    }, false, "keytool", "-printcert", "-jarfile", apkPath)
    return apkSHA1
}

task getDemoSHA1() {
    doLast {
        println("demo sha1:" + getApkSHA1("jiagu/" + unJiaguApkName))
    }
}

List<String> replaceSHA1InShell(String apkPath, OnReadLineListener listener) {
    String apkSHA1 = getApkSHA1(apkPath)
    if (apkSHA1 == null) {
        logger.error("can not get sha1 from $apkPath")
    } else {
        String stubApplicationFilePath = "./jiagu_shell/src/main/java/personal/nfl/protect/shell/StubApplication.java"
        File stubApplicationFile = new File(stubApplicationFilePath)
        if (stubApplicationFile.exists()) {
            FileReader fileReader = new FileReader(stubApplicationFile)
            List<String> lines = new ArrayList<>()
            String line
            boolean findReplaceString = false
            while ((line = fileReader.readLine()) != null) {
                if (!findReplaceString) {
                    findReplaceString = line.contains("String sha1 = \"APkSHA1\";")
                    if (findReplaceString) {
                        line = line.replace("APkSHA1", apkSHA1)
                    }
                }
                lines.add(line)
            }
            fileReader.close()
            return lines
        } else {
            logger.error("can not find $stubApplicationFilePath")
        }
    }
    return null
}

def resetStubApplicationFile(List<String> linesStr) {
    String stubApplicationFilePath = "./jiagu_shell/src/main/java/personal/nfl/protect/shell/StubApplication.java"
    File stubApplicationFile = new File(stubApplicationFilePath)
    FileWriter fileWriter = new FileWriter(stubApplicationFile)
    boolean findResetPlace = false
    String LABEL = "String sha1 = \""
    for (String str : linesStr) {
        if (!findResetPlace) {
            findResetPlace = str.contains(LABEL)
            if (findResetPlace) {
                str = str.substring(0, str.indexOf(LABEL) + LABEL.length()) + "APkSHA1\";"
            }
        }
        fileWriter.write(str)
    }
    fileWriter.close()
}

// 自动化构建，生成加固所需要的资源
task prepareJiagu() {
    delete project('jiagu_shell').buildDir
    // 打包编译壳 aar, (:jiagu_shell:bundleReleaseAar) 由于 jiagu_shell 从 library 改为 application 所以可以直接取得 dex 了
    dependsOn project('jiagu_shell').tasks.findByPath(':jiagu_shell:assembleRelease')

    delete project('jiaguLib').buildDir
    //编译jiaguLib工程，生成jar文件
    dependsOn project('jiaguLib').tasks.findByPath(':jiaguLib:build')

    doLast {
        println("jiagu ============= 已编译Aar")
        // 在根工程中创建 jiagu 文件夹
        def root = new File(rootDir, 'jiagu')
        if (root.exists()) {
            delete root
        }
        root = rootProject.mkdir('jiagu')
        println("jiagu ============= 已重新创建了 - jiagu目录")
        //将 aar文件复制到 jiagu 目录中
        // copy {
        //     from 'jiagu_shell/build/outputs/aar'
        //     into{root.absolutePath+"/aar"}
        //     //include('**/*.aar')
        // }
        // 由于直接编译成 dex 了，所以这里也要改一下
        copy {
            from 'jiagu_shell/build/outputs/apk/release'
            into { root.absolutePath + "/shellapk" }
            //include('**/*.aar')
        }

        //复制依赖的库文件信息
        copy {
            from 'jiaguLib/libs'
            into { root.absolutePath + "/libs" }
            //include('**/*.aar')
        }

        //复制加固jar和签名配置文件
        copy {
            from 'jiaguLib/build/libs', 'jiaguLib/keystore.cfg'
            into { root.absolutePath }
            //include('**/*.aar')
        }
    }

}

task copyApk() {
    // 生成 demo apk
    dependsOn project('demo').tasks.findByPath(':demo:assembleRelease')
    def root = new File(rootDir, 'jiagu')
    doLast {
        copy {
            from 'demo/build/outputs/apk/release'
            into { root.absolutePath }
        }
    }
}

task copyApkDebug() {
    // 生成 demo apk
    dependsOn project('demo').tasks.findByPath(':demo:assembleDebug')
    def root = new File(rootDir, 'jiagu')
    doLast {
        copy {
            from 'demo/build/outputs/apk/debug/demo-debug.apk'
            into { root.absolutePath }
            rename { fileName ->
                fileName = unJiaguApkName
            }
        }
    }
}

task createTestDexFiles() {
    dependsOn(copyApkDebug);
    doLast {
        File destDir = new File("jiagu_shell/src/main/assets/test")
        if (!destDir.exists()) {
            destDir.mkdirs()
        }
        ZipInputStream zIn = new ZipInputStream(new FileInputStream(new File("jiagu", unJiaguApkName)))
        ZipEntry entry = null;
        FileOutputStream fos = null;
        byte[] buf = new byte[1024 * 8];
        int len = -1;
        while ((entry = zIn.getNextEntry()) != null) {
            if (!entry.isDirectory() && entry.name.endsWith(".dex")) {
                if (entry.name == "classes.dex") {
                    fos = new FileOutputStream(new File(destDir, "classes1.dex"));
                } else {
                    fos = new FileOutputStream(new File(destDir, entry.name));
                }
                while ((len = zIn.read(buf)) != -1) {
                    fos.write(buf, 0, len);
                }
                // 关流顺序，先打开的后关闭
                fos.flush();
                fos.close();
            }
            zIn.closeEntry();
        }
        zIn.close();
    }
}

def getAaptPath() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def sdkDir = properties.getProperty('sdk.dir')
    File buildTools = new File(sdkDir, "build-tools")
    String[] tools = buildTools.list()
    String targetTool = Arrays.stream(tools).max(new Comparator<String>() {
        @Override
        int compare(String s, String t1) {
            return s <=> t1
        }
    }).orElse("")
    return "$buildTools$File.separator$targetTool"
}

task excJiagu(type: Exec) {
    workingDir new File(projectDir, "jiagu")
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        environment["Path"] = getAaptPath() + ";" + environment["Path"]
        commandLine("cmd", "/K", "java", "-jar", "jiaguLib.jar",
                "--apk_file", unJiaguApkName,
                "--keystore_cfg", "keystore.cfg",
                "--resign",
                "--assets",
                "--native",
                "--debuggable"
        )
    } else {
        environment["Path"] = getAaptPath() + ":" + environment["Path"]
        commandLine "cmd", "-c", "java", "-jar", "jiaguLib.jar", "--apk_file", unJiaguApkName, "--keystore_cfg", "keystore.cfg"
    }
}

task protectApk(type: Exec) {
    workingDir new File(projectDir, "jiagu")
    String unProtectedApk = unJiaguApkName
            .replace(".apk", "_align.apk")
            .replace(".apk", "_signed.apk")
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
//        commandLine "cmd", "/K", "java", "-jar", "libs/APKEditor-1.4.1.jar", "-h"
        commandLine "cmd", "/K", "java", "-jar", "libs/APKEditor-1.4.1.jar", "p", "-i", "out/${unProtectedApk}", "-o", "out/${unProtectedApk.replace(".apk", "_protected.apk")}"
    } else {
        commandLine 'sh', "java", "-jar", "libs/APKEditor-1.4.1.jar", "p", "-i", "out/${unProtectedApk}", "-o", "out/${unProtectedApk.replace(".apk", "_protected.apk")}"
    }
}
